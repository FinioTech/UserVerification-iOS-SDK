// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name UserVerification
import AVFoundation
import CommonCrypto
import CoreNFC
import CryptoKit
import CryptoTokenKit
import DeveloperToolsSupport
import Foundation
import OSLog
import OpenSSL
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
@_exported import UserVerification
import Vision
import VisionKit
import _Concurrency
import _CoreNFC_UIKit
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class ChipAuthPublicKeyInfo : SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  @objc deinit
}
public struct DataGroupHash {
  public var id: Swift.String
  public var sodHash: Swift.String
  public var computedHash: Swift.String
  public var match: Swift.Bool
}
public enum DataGroupId : Swift.Int, Swift.CaseIterable {
  case COM
  case DG1
  case DG2
  case DG3
  case DG4
  case DG5
  case DG6
  case DG7
  case DG8
  case DG9
  case DG10
  case DG11
  case DG12
  case DG13
  case DG14
  case DG15
  case DG16
  case SOD
  case Unknown
  public func getName() -> Swift.String
  public static func getIDFromName(name: Swift.String) -> DataGroupId
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [DataGroupId]
  public typealias RawValue = Swift.Int
  public static var allCases: [DataGroupId] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public protocol IdVerificationDelegate {
  func onStart()
  func onCardFlip()
  func onSuccess(userId: Swift.String)
  func onFailure(code: Swift.Int, error: Swift.String)
  func onReadyToSubmit()
  func onValidCapture(image: UIKit.UIImage, isFront: Swift.Bool)
}
@_hasMissingDesignatedInitializers public class DataGroup {
  public var datagroupType: DataGroupId {
    get
  }
  public var body: [Swift.UInt8] {
    get
  }
  public var data: [Swift.UInt8] {
    get
  }
  public func hash(_ hashAlgorythm: Swift.String) -> [Swift.UInt8]
  public func verifyTag(_ tag: Swift.Int, equals expectedTag: Swift.Int) throws
  public func verifyTag(_ tag: Swift.Int, oneOf expectedTags: [Swift.Int]) throws
  @objc deinit
}
public struct NFCTagDataModel {
  public let firstName: Swift.String
  public let lastName: Swift.String
  public let gender: Swift.String
  public let dateOfBirth: Swift.String
  public let nationality: Swift.String
  public let documentType: Swift.String
  public let documentSubType: Swift.String
  public let documentNumber: Swift.String
  public let expiryDate: Swift.String
  public let personalNumber: Swift.String?
  public let documentMRZ: Swift.String
  public let phoneNumber: Swift.String?
  public let placeOfBirth: Swift.String?
  public let residency: Swift.String?
  public let faceImage: UIKit.UIImage?
  public let signatureImage: UIKit.UIImage?
  public let issuerCountry: Swift.String?
}
public struct DocumentSecurityModel {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DataGroup14 : DataGroup {
  public var securityInfos: [SecurityInfo] {
    get
  }
  override public var datagroupType: DataGroupId {
    get
  }
  @objc deinit
}
public class NFCTagReader {
  public init(tag: any CoreNFC.NFCISO7816Tag)
  @objc deinit
}
public enum DocTypeEnum : Swift.String {
  case TD1
  case TD2
  case OTHER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DataGroup1 : DataGroup {
  public var elements: [Swift.String : Swift.String] {
    get
  }
  override public var datagroupType: DataGroupId {
    get
  }
  @objc deinit
}
public protocol NFCDataVerificationDelegate {
  func onPrepare()
  func onStart()
  func onSuccess()
  func onFailure(code: Swift.Int, error: Swift.String)
  func onValidCapture(data: NFCTagDataModel)
}
extension NFCDataVerificationDelegate {
  public func onValidCapture(data: NFCTagDataModel)
}
@_hasMissingDesignatedInitializers public class ActiveAuthInfo : SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getSignatureAlgorithmOIDString() -> Swift.String?
  @objc deinit
}
public class SelfieCameraOptions {
  final public let enableBackCamera: Swift.Bool
  final public let faceFrame: FaceFrame
  public init(enableBackCamera: Swift.Bool = false, faceFrame: FaceFrame = FaceFrame.disabled)
  @objc deinit
}
public class FaceFrame {
  public static let `default`: FaceFrame
  public static let disabled: FaceFrame
  final public let enableCircle: Swift.Bool
  final public let circleRadius: CoreFoundation.CGFloat
  final public let circleColor: UIKit.UIColor
  public init(enableCircle: Swift.Bool, circleRadius: CoreFoundation.CGFloat, circleColor: UIKit.UIColor)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DataGroup12 : DataGroup {
  public var issuingAuthority: Swift.String? {
    get
  }
  public var dateOfIssue: Swift.String? {
    get
  }
  public var otherPersonsDetails: Swift.String? {
    get
  }
  public var endorsementsOrObservations: Swift.String? {
    get
  }
  public var taxOrExitRequirements: Swift.String? {
    get
  }
  public var frontImage: [Swift.UInt8]? {
    get
  }
  public var rearImage: [Swift.UInt8]? {
    get
  }
  public var personalizationTime: Swift.String? {
    get
  }
  public var personalizationDeviceSerialNr: Swift.String? {
    get
  }
  override public var datagroupType: DataGroupId {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DataGroup2 : DataGroup {
  public var nrImages: Swift.Int {
    get
  }
  public var versionNumber: Swift.Int {
    get
  }
  public var lengthOfRecord: Swift.Int {
    get
  }
  public var numberOfFacialImages: Swift.Int {
    get
  }
  public var facialRecordDataLength: Swift.Int {
    get
  }
  public var nrFeaturePoints: Swift.Int {
    get
  }
  public var gender: Swift.Int {
    get
  }
  public var eyeColor: Swift.Int {
    get
  }
  public var hairColor: Swift.Int {
    get
  }
  public var featureMask: Swift.Int {
    get
  }
  public var expression: Swift.Int {
    get
  }
  public var poseAngle: Swift.Int {
    get
  }
  public var poseAngleUncertainty: Swift.Int {
    get
  }
  public var faceImageType: Swift.Int {
    get
  }
  public var imageDataType: Swift.Int {
    get
  }
  public var imageWidth: Swift.Int {
    get
  }
  public var imageHeight: Swift.Int {
    get
  }
  public var imageColorSpace: Swift.Int {
    get
  }
  public var sourceType: Swift.Int {
    get
  }
  public var deviceType: Swift.Int {
    get
  }
  public var quality: Swift.Int {
    get
  }
  public var imageData: [Swift.UInt8] {
    get
  }
  override public var datagroupType: DataGroupId {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DocumentType {
  public static let NationalId: DocumentType
  public static let OldNationalId: DocumentType
  public static let Passport: DocumentType
  public static let DrivingLicense: DocumentType
  public static let ResidentCard: DocumentType
  public static let FaceID: DocumentType
  final public let value: Swift.String
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public func AESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESECBEncrypt(key: [Swift.UInt8], message: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
public enum Constant {
}
@_hasMissingDesignatedInitializers public class FaceAngle {
  public static let LEFT: FaceAngle
  public static let RIGHT: FaceAngle
  public static let CENTER: FaceAngle
  final public let value: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Country {
  public static let Bangladesh: Country
  public static let Iraq: Country
  public static let Canada: Country
  final public let value: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SecurityInfo {
  public func getObjectIdentifier() -> Swift.String
  public func getProtocolOIDString() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ChipAuthInfo : SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DataGroup11 : DataGroup {
  public var fullName: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var dateOfBirth: Swift.String? {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var address: Swift.String? {
    get
  }
  public var telephone: Swift.String? {
    get
  }
  public var profession: Swift.String? {
    get
  }
  public var title: Swift.String? {
    get
  }
  public var personalSummary: Swift.String? {
    get
  }
  public var proofOfCitizenship: Swift.String? {
    get
  }
  public var tdNumbers: Swift.String? {
    get
  }
  public var custodyInfo: Swift.String? {
    get
  }
  override public var datagroupType: DataGroupId {
    get
  }
  @objc deinit
}
public protocol UserVerificationDelegate {
  func onStart()
  func onInstruction(faceAngle: FaceAngle)
  func onSuccess()
  func onFailure(code: Swift.Int, error: Swift.String)
  func onValidCapture(image: UIKit.UIImage, faceAngle: FaceAngle)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class COM : DataGroup {
  public var version: Swift.String {
    get
  }
  public var unicodeVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  override public var datagroupType: DataGroupId {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class UserVerification {
  public static let shared: UserVerification
  final public func config(storeId: Swift.String?, storePassword: Swift.String?, production: Swift.Bool)
  final public func scanID(preview: UIKit.UIView?, country: Country, flipIntervalTime: Swift.Double = 0.0, manualSubmit: Swift.Bool, delegate: any IdVerificationDelegate)
  final public func scanID(preview: UIKit.UIView?, document: DocumentType, flipIntervalTime: Swift.Double = 0.0, manualSubmit: Swift.Bool, delegate: any IdVerificationDelegate)
  final public func scanID(preview: UIKit.UIView?, country: Country, document: DocumentType, flipIntervalTime: Swift.Double = 0.0, manualSubmit: Swift.Bool, delegate: any IdVerificationDelegate)
  final public func verifyUser(preview: UIKit.UIView?, userId: Swift.String?, delegate: any UserVerificationDelegate)
  final public func verifyUser(preview: UIKit.UIView?, userId: Swift.String?, direction: FaceDirection, delegate: any UserVerificationDelegate)
  final public func verifyUser(preview: UIKit.UIView?, userId: Swift.String?, direction: FaceDirection, options: SelfieCameraOptions, delegate: any UserVerificationDelegate)
  final public func startSession()
  final public func stopSession()
  final public func submitSession()
  final public func verifyNFCData(userId: Swift.String?, delegate: any NFCDataVerificationDelegate)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CardAccess {
  public var securityInfos: [SecurityInfo] {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DataGroup7 : DataGroup {
  public var imageData: [Swift.UInt8] {
    get
  }
  override public var datagroupType: DataGroupId {
    get
  }
  @objc deinit
}
public func binToHexRep(_ val: [Swift.UInt8], asArray: Swift.Bool = false) -> Swift.String
public func binToHexRep(_ val: Swift.UInt8) -> Swift.String
public func binToHex(_ val: Swift.UInt8) -> Swift.Int
public func binToHex(_ val: [Swift.UInt8]) -> Swift.UInt64
public func binToHex(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.UInt64
public func hexToBin(_ val: Swift.UInt64) -> [Swift.UInt8]
public func binToInt(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.Int
public func binToInt(_ val: [Swift.UInt8]) -> Swift.Int
public func intToBin(_ data: Swift.Int, pad: Swift.Int = 2) -> [Swift.UInt8]
public func hexRepToBin(_ val: Swift.String) -> [Swift.UInt8]
public func xor(_ kifd: [Swift.UInt8], _ response_kicc: [Swift.UInt8]) -> [Swift.UInt8]
public func generateRandomUInt8Array(_ size: Swift.Int) -> [Swift.UInt8]
public func pad(_ toPad: [Swift.UInt8], blockSize: Swift.Int) -> [Swift.UInt8]
public func unpad(_ tounpad: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func desMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func aesMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func wrapDO(b: Swift.UInt8, arr: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func unwrapDO(tag: Swift.UInt8, wrappedData: [Swift.UInt8]) throws -> [Swift.UInt8]
public func intToBytes(val: Swift.Int, removePadding: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func oidToBytes(oid: Swift.String, replaceTag: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: Swift.ArraySlice<Swift.UInt8>) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: [Swift.UInt8]) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func toAsn1Length(_ data: Swift.Int) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcHash(data: [Swift.UInt8], hashAlgorithm: Swift.String) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA1Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA224Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA256Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA512Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA384Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DataGroup15 : DataGroup {
  public var rsaPublicKey: Swift.OpaquePointer? {
    get
  }
  public var ecdsaPublicKey: Swift.OpaquePointer? {
    get
  }
  override public var datagroupType: DataGroupId {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FaceDirection {
  public static let CLR: FaceDirection
  public static let LRC: FaceDirection
  final public let value: Swift.String
  @objc deinit
}
extension DataGroupId : Swift.Equatable {}
extension DataGroupId : Swift.Hashable {}
extension DataGroupId : Swift.RawRepresentable {}
extension DocTypeEnum : Swift.Equatable {}
extension DocTypeEnum : Swift.Hashable {}
extension DocTypeEnum : Swift.RawRepresentable {}
