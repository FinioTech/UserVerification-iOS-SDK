// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name UserVerification
import AVFoundation
import CommonCrypto
import CoreNFC
import CryptoKit
import CryptoTokenKit
import DeveloperToolsSupport
import Foundation
import MLKitTextRecognition
import MLKitVision
import OSLog
import OpenSSL
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
@_exported import UserVerification
import Vision
import VisionKit
import _Concurrency
import _CoreNFC_UIKit
import _StringProcessing
import _SwiftConcurrencyShims
public protocol IdVerificationDelegate {
  func onStart()
  func onCardFlip()
  func onSuccess(userId: Swift.String)
  func onFailure(code: Swift.Int, error: Swift.String)
  func onReadyToSubmit()
  func onValidCapture(image: UIKit.UIImage, isFront: Swift.Bool)
}
public struct NFCTagDataModel {
  public let firstName: Swift.String
  public let lastName: Swift.String
  public let fullName: Swift.String
  public let gender: Swift.String
  public let dateOfBirth: Swift.String
  public let nationality: Swift.String
  public let documentType: Swift.String
  public let documentSubType: Swift.String
  public let documentNumber: Swift.String
  public let expiryDate: Swift.String
  public let personalNumber: Swift.String?
  public let documentMRZ: Swift.String
  public let phoneNumber: Swift.String?
  public let placeOfBirth: Swift.String?
  public let residency: Swift.String?
  public let faceImage: UIKit.UIImage?
  public let signatureImage: UIKit.UIImage?
  public let issuerCountry: Swift.String?
  public let dgFound: [Swift.String]?
  public let docSecurity: UserVerification.DocumentSecurityModel?
}
public struct DocumentSecurityModel {
  public let ldsVersion: Swift.String?
  public let ldsHashAlgorithm: Swift.String?
  public let signatureAlgorithm: Swift.String?
  public let activeAuthSupported: Swift.Bool?
  public let issuerOrgUnit: Swift.String?
  public let issuerOrganization: Swift.String?
  public let issuerCountry: Swift.String?
  public let issuerCertAuthority: Swift.String?
  public let validFromDate: Swift.String?
  public let validUntilDate: Swift.String?
}
public class NFCTagReader {
  public init(tag: any CoreNFC.NFCISO7816Tag)
  @objc deinit
}
public protocol NFCDataVerificationDelegate {
  func onPrepare()
  func onStart()
  func onSuccess()
  func onFailure(code: Swift.Int, error: Swift.String)
  func onValidCapture(data: UserVerification.NFCTagDataModel)
}
extension UserVerification.NFCDataVerificationDelegate {
  public func onValidCapture(data: UserVerification.NFCTagDataModel)
}
public class SelfieCameraOptions {
  final public let enableBackCamera: Swift.Bool
  final public let faceFrame: UserVerification.FaceFrame
  public init(enableBackCamera: Swift.Bool = false, faceFrame: UserVerification.FaceFrame = FaceFrame.disabled)
  @objc deinit
}
public class FaceFrame {
  public static let `default`: UserVerification.FaceFrame
  public static let disabled: UserVerification.FaceFrame
  final public let enableCircle: Swift.Bool
  final public let circleRadius: CoreFoundation.CGFloat
  final public let circleColor: UIKit.UIColor
  public init(enableCircle: Swift.Bool, circleRadius: CoreFoundation.CGFloat, circleColor: UIKit.UIColor)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DocumentType {
  public static let NationalId: UserVerification.DocumentType
  public static let OldNationalId: UserVerification.DocumentType
  public static let Passport: UserVerification.DocumentType
  public static let DrivingLicense: UserVerification.DocumentType
  public static let ResidentCard: UserVerification.DocumentType
  public static let FaceID: UserVerification.DocumentType
  final public let value: Swift.String
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public func AESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESECBEncrypt(key: [Swift.UInt8], message: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
public enum Constant {
}
@_hasMissingDesignatedInitializers public class FaceAngle {
  public static let LEFT: UserVerification.FaceAngle
  public static let RIGHT: UserVerification.FaceAngle
  public static let CENTER: UserVerification.FaceAngle
  final public let value: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Country {
  public static let Bangladesh: UserVerification.Country
  public static let Iraq: UserVerification.Country
  public static let Canada: UserVerification.Country
  public static let USA: UserVerification.Country
  final public let value: Swift.String
  @objc deinit
}
public protocol UserVerificationDelegate {
  func onStart()
  func onInstruction(faceAngle: UserVerification.FaceAngle)
  func onSuccess()
  func onFailure(code: Swift.Int, error: Swift.String)
  func onValidCapture(image: UIKit.UIImage, faceAngle: UserVerification.FaceAngle)
}
@_hasMissingDesignatedInitializers final public class UserVerification {
  public static let shared: UserVerification.UserVerification
  final public func config(storeId: Swift.String?, storePassword: Swift.String?, production: Swift.Bool)
  final public func scanID(preview: UIKit.UIView?, country: UserVerification.Country, flipIntervalTime: Swift.Double = 0.0, manualSubmit: Swift.Bool, delegate: any UserVerification.IdVerificationDelegate)
  final public func scanID(preview: UIKit.UIView?, document: UserVerification.DocumentType, flipIntervalTime: Swift.Double = 0.0, manualSubmit: Swift.Bool, delegate: any UserVerification.IdVerificationDelegate)
  final public func scanID(preview: UIKit.UIView?, country: UserVerification.Country, document: UserVerification.DocumentType, flipIntervalTime: Swift.Double = 0.0, manualSubmit: Swift.Bool, delegate: any UserVerification.IdVerificationDelegate)
  final public func verifyUser(preview: UIKit.UIView?, userId: Swift.String?, delegate: any UserVerification.UserVerificationDelegate)
  final public func verifyUser(preview: UIKit.UIView?, userId: Swift.String?, direction: UserVerification.FaceDirection, delegate: any UserVerification.UserVerificationDelegate)
  final public func verifyUser(preview: UIKit.UIView?, userId: Swift.String?, direction: UserVerification.FaceDirection, options: UserVerification.SelfieCameraOptions, delegate: any UserVerification.UserVerificationDelegate)
  final public func startSession()
  final public func stopSession()
  final public func submitSession()
  final public func verifyNFCData(userId: Swift.String?, delegate: any UserVerification.NFCDataVerificationDelegate)
  @objc deinit
}
public func binToHexRep(_ val: [Swift.UInt8], asArray: Swift.Bool = false) -> Swift.String
public func binToHexRep(_ val: Swift.UInt8) -> Swift.String
public func binToHex(_ val: Swift.UInt8) -> Swift.Int
public func binToHex(_ val: [Swift.UInt8]) -> Swift.UInt64
public func binToHex(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.UInt64
public func hexToBin(_ val: Swift.UInt64) -> [Swift.UInt8]
public func binToInt(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.Int
public func binToInt(_ val: [Swift.UInt8]) -> Swift.Int
public func intToBin(_ data: Swift.Int, pad: Swift.Int = 2) -> [Swift.UInt8]
public func hexRepToBin(_ val: Swift.String) -> [Swift.UInt8]
public func xor(_ kifd: [Swift.UInt8], _ response_kicc: [Swift.UInt8]) -> [Swift.UInt8]
public func generateRandomUInt8Array(_ size: Swift.Int) -> [Swift.UInt8]
public func pad(_ toPad: [Swift.UInt8], blockSize: Swift.Int) -> [Swift.UInt8]
public func unpad(_ tounpad: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func desMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func aesMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func wrapDO(b: Swift.UInt8, arr: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func unwrapDO(tag: Swift.UInt8, wrappedData: [Swift.UInt8]) throws -> [Swift.UInt8]
public func intToBytes(val: Swift.Int, removePadding: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func oidToBytes(oid: Swift.String, replaceTag: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: Swift.ArraySlice<Swift.UInt8>) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: [Swift.UInt8]) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func toAsn1Length(_ data: Swift.Int) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcHash(data: [Swift.UInt8], hashAlgorithm: Swift.String) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA1Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA224Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA256Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA512Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA384Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@_hasMissingDesignatedInitializers public class FaceDirection {
  public static let CLR: UserVerification.FaceDirection
  public static let LRC: UserVerification.FaceDirection
  final public let value: Swift.String
  @objc deinit
}
